#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define NUMBER  1
#define SYMBOL  2
#define HOTKEY  3

#define AS(keycode) &as LS(keycode) keycode

&mt {
    tapping-term-ms = <160>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&kp TAB>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        modcp: mod_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COPY";
            #binding-cells = <0>;
            bindings = <&as LS(C) C>, <&kp C>;

            mods = <(LGUI | RGUI)>;
        };
    };

    macros {
        macro_phone: macro_phone {
            // 1351

            label = "MACRO_PHONE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N3 &kp N5 &kp N1>;
        };

        macro_email_q: macro_email_q {
            // 2894512440@qq.com

            label = "MACRO_EMAIL_QQ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N8 &kp N9 &kp N4 &kp N5 &kp N1 &kp N2 &kp N4 &kp N4 &kp N0 &kp AT &kp Q &kp Q &kp DOT &kp C &kp O &kp M>;
        };

        macro_email_g: macro_email_g {
            // 135115

            compatible = "zmk,behavior-macro";
            label = "MACRO_EMAIL_GMAIL";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N3 &kp N5 &kp N1 &kp N1 &kp N5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_LSHFT {
            timeout-ms = <50>;
            key-positions = <15 14>;
            bindings = <&kp  LSHFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&none           &none        &none           &none             &none            &none                       &none                       &none            &none              &none            &none                   &kp EQUAL
&kp TAB         &kp Q        &kp W           &kp E             &kp R            &kp T                       &kp Y                       &kp U            &kp I              &kp O            &kp P                   &kp MINUS
&kp ESCAPE      &mt LCTRL A  &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LEFT_WIN F   &mt LS(LA(LC(LEFT_GUI))) G  &mt LS(LA(LC(LEFT_GUI))) H  &mt RIGHT_GUI J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L  &mt RIGHT_CONTROL SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z        &kp X           &kp C             &kp V            &kp B                       &kp N                       &kp M            &kp COMMA          &kp DOT          &kp FSLH                &kp BACKSLASH
                             &kp GRAVE       &kp BSLH          &kp LEFT_GUI     &lt 2 SPACE                 &kp ENTER                   &kp BACKSPACE    &kp LBKT           &kp RBKT
                             &mo 3           &mo 2             &lt 2 LC(SPACE)  &lt 1 LG(SPACE)             &lt 1 LS(RET)               &mo 2            &kp LS(RET)        &mo 3
            >;
        };

        number_layer {
            label = "NUMBER";
            bindings = <
&trans  &kp F1  &kp F2    &kp F3    &kp F4     &kp F5                   &kp F6           &kp F7     &kp F8     &kp F9     &kp F10  &trans
&trans  &trans  &none     &kp UP    &none      &kp LS(LA(C_VOLUME_UP))  &none            &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans   &trans
&trans  &none   &kp LEFT  &kp DOWN  &kp RIGHT  &kp LS(LA(C_VOL_DN))     &kp KP_DOT       &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans   &none
&trans  &none   &none     &none     &none      &kp K_MUTE               &kp KP_NUMBER_0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans   &trans
                &trans    &trans    &trans     &trans                   &none            &none      &trans     &trans
                &trans    &trans    &trans     &trans                   &trans           &none      &none      &trans
            >;
        };

        symbol {
            bindings = <
&trans  &trans           &trans        &trans        &trans            &trans             &trans          &trans           &trans        &trans                &trans                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR        &kp PERCENT        &kp CARET       &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&trans  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4      &kp N5             &kp NUMBER_6    &kp N7           &kp N8        &kp N9                &kp N0                 &kp MINUS
&trans  &trans           &kp TILDE     &kp GRAVE     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans        &trans                &trans                 &trans
                         &trans        &trans        &trans            &trans             &trans          &trans           &trans        &trans
                         &trans        &trans        &trans            &trans             &trans          &trans           &trans        &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans   &trans      &trans      &trans  &trans      &trans          &trans  &trans  &trans  &trans   &trans
&trans  &kp F1   &kp F2      &kp F3      &kp F4  &kp F5      &kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp F11  &kp F12     &trans      &trans  &trans      &trans          &trans  &trans  &trans  &trans   &trans
&trans  &trans   &trans      &trans      &trans  &bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &trans  &trans   &trans
                 &bt BT_PRV  &bt BT_NXT  &trans  &trans      &trans          &trans  &trans  &trans
                 &trans      &trans      &trans  &trans      &trans          &trans  &trans  &trans
            >;
        };
    };
};
